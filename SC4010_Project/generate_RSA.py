from sage.all import *

def strong_rsa():
    p = random_prime(2**1024, False, 2**1023)
    q = random_prime(2**1024, False, 2**1023)

    n = p*q
    phi = (p - Integer(1)) * (q - Integer(1))

    e = ZZ.random_element(phi)

    while(gcd(e, phi) != Integer(1)):
        e = ZZ.random_element(phi)

    bezout = xgcd(e, phi)

    d = Integer(mod(bezout[Integer(1)], phi))

    print("n = ", n)
    print()
    print("e = ", e)
    print()
    print("d = ", d)
    print()

    return n, e, d

def vulnerable_rsa():
    e = random_prime(2**511-1, False, 2**510)
    first_loop = True
    while first_loop or gcd(e, phi) != 1 or n.nbits() != 2048:
        first_loop = False
        # Note: Product of two 1024-bit primes not always 2048 bit
        # As this is just a proof of concept, we just reject if n < 2048 bits.
        p = random_prime(2**1024-1, False, 2**1023)
        q = random_prime(2**1024-1, False, 2**1023)
        n = p * q
        phi = (p - 1) * (q - 1)
    bezout = xgcd(e, phi)
    d = Integer(mod(bezout[1], phi))
    assert mod(d * e, phi) == 1
    # swap the public and private exponent
    e, d = d, e

    print("n = ", n)
    print()
    print("e = ", e)
    print()
    print("d = ", d)
    print()
    
    return n, e, d

def gen_rsa(d_bits, prime_bits):
    e = random_prime(2**d_bits-1, False, 2**(d_bits-1))
    first_loop = True
    while first_loop or gcd(e, phi) != 1 or n.bits() != 2048:
        first_loop = False
        p = random_prime(2**prime_bits-1, False, 2**(prime_bits-1))
        q = random_prime(2**prime_bits-1, False, 2**(prime_bits-1))

        n = p*q
        phi = (p-1) * (q-1)

        bezout = xgcd(e, phi)
        d = Integer(mod(bezout[1], phi))
        assert mod(d*e, phi) == 1

        e, d = d, e

        return n, e, d

def smu_paper_strong():
    p = 149152789954777605902728010071698098166012582226622431819289122514169457539932334134597092278981380321230711187456841568624468109564949590136209617496485610132757159972179803365696196082852787593165397375676105883876156037386267616351893514244449317501945030878223260165335627870023389893285059210806959842047
    q = 91111670647390707425777905721685801559348047103723950901368993939415036663226117348304673364352537910245424858823133427100037450351560880167068602866693686538514065809046607055077315962773577225073326866738864269463955213055868264961509069984512558478563387800108472411842694487618873870285913324977721380459
    n = 13589559874499142355751341406035397684255014057126074107542128678226120805968144470881921455188421199958881804793787862241122953475325559673599672520286335533603757756220187100459480766110302567765384002615378427706137294329327237056965340554246676192238028495484178363269586639055958512318119343461203157683957219446440131865111755637262034345904525944378245664360781126077167607773923145892054273772268437286473549239327507165202984412539272993494393051276342706564766558323502943968139657917910935303127172003394948840018966371344751083592758498686562766142991016439706774683565904851307008653906602359169432359573
    e = 13304190305540874988537606932970841745187260177538586692536629973666723493599969039027603809193689401864701342931024242788337425097494436400540365929405551611921972457828733905335876145884966324498356636307109882051341675000847275098816480646360997741181379056131957228236725683521298430680120181413196040521148335594185317357181376243102285349453986073741265996084174232546667689203317832651303040826314383724274089312645508566625119551763409129593521919571799876282943338137212590478107436224521388686150923674070654517584476965434899752981788701659669410312149739405387634998001901681249323342574748913658325046931
    d = 5398478203031165162660683678298945738486904487457579584350107981488386113009608061807566512262828961634063613067066355488922382801538118199095559890393235

    return n, e, d

def smu_paper_vulnerable():
    n = 22836858353287668091920368816286415778103964252589282951304204749990229966219821666645965814540188994842992237656073262275487153804387435627030082632116650572564937978011181394388679265524940467869924854736500383557204094262355848335841884492243316986356990029691160546064558117652232596722139327390669673188457131381644120787783215342848744792830245018055981406688933203072001361907941383251321687221421794347400173174782270159663404029234219498695194551646668806852454006312372413658692027515557841414406612321469051864313571125665367706693817569253817941547895452285471196859927901448206057935428455238863726089083
    e = 17160819308904585327789016134897914235762203050367346326795855670589639956759654280349066373746605316475059968746119216642450591929370601129337832009643372382766547546926535697752805239918767190684796265092986690494859761183156661268716818476416708725889507391913936637990186766407654053176557709023167209821832859747419658344363466584895316847817524247032573926518508235172974203821389437703589046605944230019122859293725173459273262320732474230363132436274414264865868028527840102483762414082363751872086126321058865023936481567763302369873292499881142950825612490253095749933833690395192403591650153661610070010419
    d = 5968166949079360555220268992852191823920023811474288738674370592596189517443887780023653031793516493806462114248181371416016184480421640973439863346079123

    return n, e, d